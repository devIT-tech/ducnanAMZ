import streamlit as st
import pandas as pd
import os
import torch
import numpy as np
import matplotlib.pyplot as plt
from model import SalesLSTM

# ===== C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi (an to√†n) =====
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # th∆∞ m·ª•c g·ªëc
DATA_DIR = os.path.join(BASE_DIR, "data", "sales_history")
MODEL_DIR = os.path.join(BASE_DIR, "best_models")  


# ===== H√†m t·∫£i m√¥ h√¨nh v√† d·ª± b√°o =====
def predict_sales(asin_id, input_seq):
    model = SalesLSTM()
    model_path = os.path.join(MODEL_DIR, f"lstm_model_{asin_id}.pt")
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model file not found: {model_path}")
    model.load_state_dict(torch.load(model_path, map_location=torch.device("cpu")))
    model.eval()

    input_tensor = torch.tensor(input_seq, dtype=torch.float32).unsqueeze(0)  # shape: [1, 30, 1]
    with torch.no_grad():
        prediction = model(input_tensor).squeeze().item()
    return prediction

# ===== Danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn =====
def get_available_products():
    if not os.path.exists(DATA_DIR):
        raise FileNotFoundError(f"DATA_DIR does not exist: {DATA_DIR}")
    files = os.listdir(DATA_DIR)
    return [f.replace("_sales_history.csv", "") for f in files if f.endswith("_sales_history.csv")]

# ===== Giao di·ªán Streamlit =====
st.set_page_config(page_title="Amazon Sales Forecast", layout="wide")
st.title("üì¶ Amazon Sales Forecasting")
st.markdown("Ch·ªçn m·ªôt m√£ s·∫£n ph·∫©m ƒë·ªÉ xem l·ªãch s·ª≠ doanh thu v√† d·ª± b√°o cho ng√†y ti·∫øp theo.")

# ===== Ch·ªçn s·∫£n ph·∫©m =====
try:
    available_asins = get_available_products()
    asin_id = st.selectbox("üîç Ch·ªçn m√£ s·∫£n ph·∫©m (ASIN):", available_asins)

    # ===== ƒê·ªçc d·ªØ li·ªáu l·ªãch s·ª≠ =====
    csv_path = os.path.join(DATA_DIR, f"{asin_id}_sales_history.csv")
    df = pd.read_csv(csv_path, parse_dates=["date"])

    # ===== Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m =====
    with st.expander("üõí Th√¥ng tin s·∫£n ph·∫©m"):
        st.write(f"**T√™n s·∫£n ph·∫©m:** {df['title'].iloc[0]}")
        st.write(f"**Gi√°:** {df['price'].iloc[0]}")
        st.write(f"**X·∫øp h·∫°ng trung b√¨nh:** {df['average_rating'].iloc[0]}")
        st.write(f"**T·ªïng s·ªë l∆∞·ª£t ƒë√°nh gi√°:** {df['num_reviews'].iloc[0]}")

    # ===== Bi·ªÉu ƒë·ªì doanh thu theo ng√†y =====
    st.subheader("üìà Doanh thu theo ng√†y")
    st.line_chart(df.set_index("date")["daily_revenue"])

    # ===== D·ª± b√°o doanh thu =====
    if len(df) >= 30:
        recent_sales = df["daily_revenue"].values.reshape(-1, 1).astype(np.float32)
        recent_sales = (recent_sales - recent_sales.min()) / (df["daily_revenue"].max() - df["daily_revenue"].min() + 1e-6)
        recent_sales = [[x[0]] for x in recent_sales[-30:]]

        try:
            prediction = predict_sales(asin_id, recent_sales)
            prediction_scaled = prediction * (df["daily_revenue"].max() - df["daily_revenue"].min()) + df["daily_revenue"].min()
            prediction_scaled = abs(prediction_scaled)
            st.success(f"üìä D·ª± b√°o doanh thu ng√†y ti·∫øp theo: **${prediction_scaled:.2f}**")
        except Exception as e:
            st.error(f"‚ùå Kh√¥ng th·ªÉ d·ª± b√°o: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 30 ng√†y doanh thu ƒë·ªÉ d·ª± b√°o.")

except FileNotFoundError as e:
    st.error(f"‚ùå L·ªói: {str(e)} ‚Äì Vui l√≤ng ki·ªÉm tra l·∫°i th∆∞ m·ª•c `data/sales_history`.")

